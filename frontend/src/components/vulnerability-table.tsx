import toast from 'react-hot-toast'
import { useState, useEffect, useContext, useRef } from 'react'
import { useNavigate } from 'react-router-dom'
import { useDebounce } from '@uidotdev/usehooks'
import { ThemeContext } from '../layouts/layout'
import { currentUserCan, getVulnerabilityStatusColor } from '../lib/utilities'
import { PencilSquareIcon, TrashIcon, BackspaceIcon } from '@heroicons/react/24/outline';
import { 
  deleteProjectVulnerabilities, 
  fetchProjectFindings, 
  searchVulnerabilities, 
  uploadProjectVulnerabilities, 
  updateVulnerabilityStatus,
  insertProjectVulnerability,
  getVulnerability  
} from '../lib/data/api'
import DataTable from 'react-data-table-component'
import { Dialog, DialogHeader, DialogBody } from "@material-tailwind/react";
import { 
  Vulnerability, 
  VulnWithActions, 
} from '../lib/data/definitions'
import { TableColumn } from 'react-data-table-component'
import { 
  List, 
  ListItem, 
  Spinner
} from '@material-tailwind/react';
import { useVulnerabilityColor } from '../lib/customHooks';
import {  DocumentPlusIcon } from '@heroicons/react/24/outline';
import { StyleTextfield, ModalErrorMessage } from '../lib/formstyles';


interface VulnerabilityTableProps {
  projectId: number
}

export default function VulnerabilityTable(props: VulnerabilityTableProps): JSX.Element {
  const {projectId} = props
  const [searchValue, setSearchValue] = useState('')
  const [selected, setSelected] = useState([])
  const debouncedValue = useDebounce<string>(searchValue, 500)
  const [spinner, setSpinner] = useState(false) //shows spinner for vulnerability search
  const navigate = useNavigate()
  const [searchResults, setSearchResults] = useState<{ id:number, vulnerabilityname: string }[]>([])
  const [showUploadCsv, setShowUploadCsv] = useState(false)
  const [findings, setFindings] = useState<Vulnerability[]>([])
  const [showStatusUpdate, setShowStatusUpdate] = useState(false)
  const canEdit = currentUserCan('Manage Projects')
  const theme = useContext(ThemeContext);
  async function deleteFinding(event:any, id:number | number[]): Promise<void> {
    let toDelete:number[] = []
    if(typeof id === 'number'){
      toDelete.push(id)
    } else {
      toDelete = id
    }
    event.stopPropagation()
    if (!confirm('Are you sure?')) {
      return;
    }
    try {
      await deleteProjectVulnerabilities(toDelete)
      loadFindings()
      toast.success('Vulnerability deleted')
    } catch(error){
      console.error(error)
      toast.error(String(error))
    }
  }
  const loadFindings = async () => {
    const _findings = await fetchProjectFindings(String(projectId)) as VulnWithActions[]
    let temp = formatRows(_findings)
    setFindings(temp)
  }
  useEffect(() => {
    loadFindings()
  }, [projectId])

  function formatRows(rows: VulnWithActions[]):VulnWithActions[] {
    let temp: any = []
    rows.forEach((row: VulnWithActions) => {
      row.actions = (<>
                    <PencilSquareIcon onClick={() => navigate(`/projects/${projectId}/vulnerability/edit/${row.id}`)} className="inline w-6 cursor-pointer"/>
                    <TrashIcon onClick={(event) => deleteFinding(event,row.id as number)} className="inline w-6 ml-2 cursor-pointer" />                        
                    </>)
      const [meaning, color] = useVulnerabilityColor(row.vulnerabilityseverity as string)
      row.severity = (<span className={`text-[${color}]`}>{meaning}</span>)
      temp.push(row)
    });
    return temp;
  
  }
  const columns: TableColumn<VulnWithActions>[] = [
    ...(canEdit ? [{
      name: 'Action',
      cell: (row: VulnWithActions) => row.actions,
     
      maxWidth: '1rem'
    }] : []),
    {
      name: 'Name',
      selector: (row: VulnWithActions) => row.vulnerabilityname,
      sortable: true
    },
    ...(projectId ? [{
      name: 'Status',
      cell: (row: VulnWithActions) => <span className={getVulnerabilityStatusColor(row.status as string )}>{row.status}</span>,
      maxWidth: '10em',
      sortable: true,
      selector: (row: VulnWithActions) => row.status as string || '',
      sortFunction: (a: VulnWithActions, b: VulnWithActions) => (a.status ?? '').localeCompare(b.status ?? ''),
    }] : []),
    {
      name: 'Severity',
      cell: (row: VulnWithActions) => row.severity,
      maxWidth: '5em',
      sortable: true,
      sortFunction: (a: VulnWithActions, b: VulnWithActions) => (a.vulnerabilityseverity ?? '').localeCompare(b.vulnerabilityseverity ?? ''),
    },
    {
      name: 'Score',
      selector: (row: VulnWithActions) => row.cvssscore ?? 0,
      maxWidth: '5em',
      sortable: true
    },
  ]
  // recursive function to generate a unique name for a new vulnerability that doesn't clash with existing ones in findings
  function generateUniqueName(): string {
    const tempName = "New Vulnerability " + Math.floor(Math.random() * 100);
    if (findings.some((item: { vulnerabilityname: string }) => item.vulnerabilityname === tempName)) {
      return generateUniqueName(); // Recursively call if name exists
    }
    return tempName;
  }
  const handleSelectedSearchItem = (vid:string | number, name: string = '') => {
    setSearchValue(name.trim())
    setSpinner(true)
    
    if(vid==='new'){
      const tempName = generateUniqueName()
      const toInsert = {
        project: projectId,
        vulnerabilityname: tempName,
        instance: []
      }
      insertProjectVulnerability(toInsert).then((data)=>{
        navigate(`/projects/${projectId}/vulnerability/edit/${data.id}`)
      })
    } else if (vid) {
      const selectedItem = searchResults.find(item => item.id === vid)
      if (selectedItem) {
        setSpinner(true)
        getVulnerability(String(selectedItem.id))
        .then((data)=>{
          const toInsert = {
            ...data,
            project: projectId,
            instance: []
          }
          insertProjectVulnerability(toInsert).then((data)=>{
            toast.success('Vulnerability added')
            navigate(`/projects/${projectId}/vulnerability/edit/${data.id}/poc`)
            
          })
        }).catch((error)=>{
          console.error(error)
          toast.error(String(error))
        }).finally(()=>{
          setSpinner(false)
        })
      }
    }
    setSearchResults([])
  }
  async function deleteMultiple(event:any){
    event.stopPropagation()
    if(selected.length == 0){
      toast.error('Please select at least one vulnerability to delete')
      return
    }
    await deleteFinding(event, selected)
    setSelected([])
  }
  const handleSelectedRowsChange = (event: any) => {
    const ids = event.selectedRows.map((item:any) => item.id)
    setSelected(ids)
  }
  
  const toggleShowUploadCsv = (event:any) => {
    event.stopPropagation()
    event.preventDefault()
    setShowUploadCsv(!showUploadCsv)
  }
  useEffect(() => {
    if(debouncedValue){
      setSpinner(true)
      searchVulnerabilities(debouncedValue).then((data) => {
        //filter out the ones that are already in the project
        const filteredData = data.filter((item: { vulnerabilityname: string }) => {
          return !findings.some((finding) => finding.vulnerabilityname === item.vulnerabilityname)
        });
        setSearchResults(filteredData);
      }).catch((error) => {
        console.error(error)
        // toast.error(error.)
      }).finally(() => {
        setSpinner(false)
      })
    }
  }, [debouncedValue])
  const clearSearch = () => {
    setSearchValue('')
    setSearchResults([])
  }
  const handleNameSearch = (event:any) => {
    setSearchValue(event.target.value)
    if(event.target.value==''){
      setSearchResults([])
    }
  }
  const refreshAfterStatusChange = () => {
    loadFindings()
    setShowStatusUpdate(false)
  }
  return (
          <>
            {currentUserCan('Manage Projects') &&
              <div className="relative max-w-xl">
                <input 
                  list="searchResults" 
                  placeholder='Search & add' value={searchValue} 
                  className="border border-gray-200 p-2 rounded-md w-3/4" 
                  type="text" 
                  onChange={handleNameSearch} 
                />
                {spinner && <Spinner className="h-6 w-6 -ml-8 inline mr-2" />}
                {!spinner && searchValue && <BackspaceIcon onClick={clearSearch} className="text-secondary w-6 h-6 inline -ml-8 mr-2" />}
                
                
                <List className={`max-w-xl absolute bg-white border border-t-0 -mt-0.50 pt-4 border-gray-200 p-0 rounded-b-md z-10 ${searchValue && searchResults.length > 0 ? 'block' : 'hidden'}`} key='searchResults'>
                    {searchValue && searchResults.map((item)=>{
                        return <div key={`search-${item.id}`}><ListItem  onClick={()=>handleSelectedSearchItem(item?.id, item?.vulnerabilityname)} ><DocumentPlusIcon className="h-6 w-6 mr-1"/>{item?.vulnerabilityname}</ListItem></div>
                      })
                    }
                
                </List>
                
                {!showUploadCsv &&
                      <div className='mt-2'>
                        <button key='addNewVulnerability' className='bg-primary text-white p-2 rounded-md ml-0' onClick={()=>handleSelectedSearchItem('new')}>Add New</button>
                        <span className='mx-2'>or</span>
                        <button className='ml-1 mt-2 cursor-pointer bg-secondary text-white p-2 rounded-md' onClick={toggleShowUploadCsv}>
                            Upload CSV
                        </button>
                      </div>
                }
                
                <div className='mt-4'>
                <CSVInput projectId={projectId} visible={showUploadCsv} hide={toggleShowUploadCsv} afterUpload={()=>loadFindings()} afterUploadError={(error)=>toast.error(String(error))}/>
                
                </div>
              </div>
            }           
            <div className='w-full relative'>
              {currentUserCan('Manage Projects') &&
              <>
                
                <button  
                  className='bg-secondary float-right p-2 text-white rounded-md disabled:opacity-50 '
                  disabled={selected.length === 0}
                  onClick = {deleteMultiple}
                >
                  Delete
                </button>
                <button  
                  className='bg-primary float-right p-2 text-white rounded-md disabled:opacity-50 mr-2'
                  disabled={selected.length === 0}
                  onClick = {() => setShowStatusUpdate(true)}
                >
                  Update Status
                </button>
                {showStatusUpdate && <StatusUpdateForm selected={selected} afterSave={refreshAfterStatusChange} />}
              </>
              }
              <DataTable
                columns={columns}
                data={findings}
                pagination
                paginationPerPage={10}
                striped
                onSelectedRowsChange={handleSelectedRowsChange}
                theme={theme}
                {...(currentUserCan('Manage Projects') ? { selectableRows: true } : {})}
                />
              
            </div>
          </>
  )
}

interface StatusUpdateProps {
  selected: number[]
  afterSave: () => void
}
const StatusUpdateForm = ({selected, afterSave}: StatusUpdateProps): JSX.Element => {
  const [error, setError] = useState('')
  const handleClose = () => {
    afterSave()
  }
  const cancel = () => {
    afterSave()
  }
  const [status, setStatus] = useState('')
  const handleStatusChange = (event: any) => {
    setStatus(event.target.value)
  }
  const handleSave   = async (event: any) => {
    event.preventDefault()
    if(!status){
      setError('Please choose a status')
      return
    }
    setError('')
    try {
      if(selected.length == 1){
        await updateVulnerabilityStatus(selected[0], status)
        toast.success(`Status updated for ${selected.length} vulnerabilities`)
      } else {
        await Promise.all(selected.map(id => updateVulnerabilityStatus(id, status)))
        toast.success(`Status updated for ${selected.length} vulnerabilities`)
      }
      afterSave()
    } catch(error) {
      const err = error as { response?: { data?: { message?: string } } }
      const msg = err.response?.data?.message ?? String(error)
      console.error(error)
      setError('Error: ' + msg)
    }
    
  }
  return (           
            <Dialog handler={handleClose} open={true} size="sm" className="modal-box w-[500px] bg-white p-4 rounded-md" >
              {error && <ModalErrorMessage message={error} />}
              <DialogHeader>Update Status for {selected.length} vulnerabilities</DialogHeader>
              <DialogBody>
                <form onSubmit={handleSave}>
                  <select name="status" value={status} onChange={handleStatusChange} className={`${StyleTextfield}`}>
                    <option value="">Select Status</option>
                    <option value="Vulnerable"> Vulnerable</option>
                    <option value="Confirm Fixed">Confirm Fixed</option>
                    <option value="Accepted Risk">Accepted Risk</option>
                  </select>
                  <div className='mt-4 '>
                    <button type="submit" onClick={handleSave} className="bg-primary text-white p-2 rounded-md mt-2 mr-2">Update</button>
                    <span className='underline cursor-pointer text-secondary' onClick={cancel}>cancel</span>
                  </div>
                </form>
              </DialogBody>
            </Dialog>
  )
}
interface CSVInputProps {
  projectId: number
  visible: boolean
  hide: (event: any) => void
  afterUpload: (data: any) => void
  afterUploadError: (error: any) => void
}
const CSVInput = ({projectId, visible = false, hide, afterUpload, afterUploadError}: CSVInputProps): JSX.Element => {
  // /api/project/vulnerability/Nessus/csv/<project-id>/
  const fileInput = useRef<HTMLInputElement>(null)
  const [csvFileName, setCsvFileName] = useState('')
  const [csvFile, setCsvFile] = useState<File | null>(null)
  useEffect(() => {
    if(visible){
      setCsvFileName('')
      setCsvFile(null)
    }
  }, [visible])
  const handleFile = (event:any) => {
    setCsvFileName(event.target.files[0].name)
    setCsvFile(event.target.files[0])
    
  }
  const resetUploader = () => {
    setCsvFileName('')
    setCsvFile(null)
    if(fileInput.current){
      fileInput.current.value = ''
    }
  }
  const deleteCsvFile = () => {
    resetUploader()
  }
  const handleCSVUpload = async () : Promise<void> => {
    if(csvFile){
      try {
        const result = await uploadProjectVulnerabilities(projectId, csvFile)
        toast.success('Upload complete')
        resetUploader()
        afterUpload(result)
      } catch(error){
        console.error(error)
        toast.error(String(error))
        afterUploadError(error)
      }
    }
    
  }
  if(!visible){
    return <></>
  }
  return (
    <>
      <p className='text-sm my-2'>
        Click <span className='font-bold'>Choose File</span> to select a CSV or <span className='underline cursor-pointer text-secondary' onClick={hide}>cancel</span>
      </p>
      <input type="file"
        id="csv"
        key="csv"
        name="csv"
        accept="text/csv"
        onChange={handleFile}
        ref={fileInput}
        className={`text-sm text-white
                  file:text-white
                    file:mr-5 file:py-2 file:px-6
                    file:rounded-full file:border-0
                    file:text-sm file:font-medium
                    file:bg-primary
                    file:cursor-pointer
                    ${csvFile ? 'opacity-75' : ''}
                    hover:file:bg-secondary`}
      />
      {csvFileName && 
        <>
        <div className='text-md text-primary mt-2 ml-2'>
          <BackspaceIcon className="w-4 h-4 inline mr-2 text-secondary" onClick={deleteCsvFile}/>
          {csvFileName}
        </div>
        <button className='bg-secondary text-sm text-white p-2 rounded-full block mt-4' onClick={handleCSVUpload}>Upload Now</button>
        </>
      }
    </>
  )
}
